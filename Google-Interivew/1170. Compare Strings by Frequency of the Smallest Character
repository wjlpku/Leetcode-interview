/*
Let's define a function f(s) over a non-empty string s, which calculates the frequency of the smallest character in s. For example, if s = "dcce" then f(s) = 2 because the smallest character is "c" and its frequency is 2.

Now, given string arrays queries and words, return an integer array answer, where each answer[i] is the number of words such that f(queries[i]) < f(W), where W is a word in words.

 

Example 1:

Input: queries = ["cbd"], words = ["zaaaz"]
Output: [1]
Explanation: On the first query we have f("cbd") = 1, f("zaaaz") = 3 so f("cbd") < f("zaaaz").
Example 2:

Input: queries = ["bbb","cc"], words = ["a","aa","aaa","aaaa"]
Output: [1,2]
Explanation: On the first query only f("bbb") < f("aaaa"). On the second query both f("aaa") and f("aaaa") are both > f("cc").
*/
class Solution {
public:
    vector<int> numSmallerByFrequency(vector<string>& queries, vector<string>& words) {
        vector<int> res;
        // if (queries.empty()) return {};
        int freq_cnt[11];
        memset(freq_cnt, 0, sizeof(freq_cnt));
        
        for (string word: words)
            freq_cnt[find_min_cnt(word)]++;

        for(int i=1; i<=10; i++)
        {
            freq_cnt[i] = 0;
            for(int j=i+1; j<=10; j++)
                freq_cnt[i] += freq_cnt[j];
        }
        
        for(string query: queries){
            res.push_back(freq_cnt[find_min_cnt(query)]);
        }
        return res;
    }
private:
    int find_min_cnt(string str){
        int min_ch_cnt = 0;
        int min_ch = INT_MAX;
        for (char ch: str){
            if ((ch-'a')<min_ch){
                min_ch = ch - 'a';
                min_ch_cnt = 1;
            }else{
                if ((ch-'a')==min_ch)
                    min_ch_cnt++;
            }
        }
        return min_ch_cnt;
    }
};
