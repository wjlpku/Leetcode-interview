/*
Given a string of numbers and operators, 
return all possible results from computing 
all the different possible ways to group numbers and operators. 
The valid operators are +, - and *.
Simple DP problem

Input: "2-1-1"
Output: [0, 2]
Explanation: 
((2-1)-1) = 0 
(2-(1-1)) = 2
*/
class Solution {
public:
    vector<int> diffWaysToCompute(string input) {
        unordered_map<string, vector<int>> str_to_vec;
        return compute(input, str_to_vec);
    }
private:
    vector<int> compute(string input, unordered_map<string, vector<int>>& str_to_vec){
        if (str_to_vec.find(input)!=str_to_vec.end())
            return str_to_vec[input];
        int s_len = input.size();
        vector<int> res;
        for (int i=0; i<s_len; ++i){
            if(ispunct(input[i]))
                for(int a: compute(input.substr(0, i), str_to_vec))
                    for(int b: compute(input.substr(i+1), str_to_vec)){
                        if(input[i]=='+') res.push_back(a+b);
                        if(input[i]=='-') res.push_back(a-b);
                        if(input[i]=='*') res.push_back(a*b);
                    }               
        }
        return str_to_vec[input] = res.size()?res:vector<int>{stoi(input)};
    }
};
